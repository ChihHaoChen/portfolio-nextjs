{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nconst postsDirectory = path.join(process.cwd(), 'posts');\nexport const getPostFiles = () => {\n  return fs.readdirSync(postsDirectory);\n};\nexport const getAllPosts = () => {\n  const postFiles = getPostFiles();\n  const allPosts = postFiles.map(postFile => {\n    return getPostData(postFile);\n  });\n  const sortedPosts = allPosts.sort((postA, postB) => {\n    postA.date > postB.date ? -1 : 1;\n  });\n  return sortedPosts;\n};\nexport const getFeaturedPosts = () => {\n  const allPosts = getAllPosts();\n  const featuredPosts = allPosts.filter(post => post.isFeatured);\n  return featuredPosts;\n};\nexport const getPostData = postIdentifier => {\n  const postSlug = postIdentifier.replace(/\\.md$/, '');\n  const filePath = path.join(postsDirectory, `${postSlug}.md`);\n  const fileContent = fs.readFileSync(filePath, 'utf-8');\n  const {\n    data,\n    content\n  } = matter(fileContent);\n\n  const postData = _objectSpread(_objectSpread({\n    slug: postSlug\n  }, data), {}, {\n    content\n  });\n\n  return postData;\n};","map":{"version":3,"sources":["/Users/chihhao/workspace/webApp/Nextjs/Udemy/portfolio-nextjs/lib/posts-util.js"],"names":["fs","path","matter","postsDirectory","join","process","cwd","getPostFiles","readdirSync","getAllPosts","postFiles","allPosts","map","postFile","getPostData","sortedPosts","sort","postA","postB","date","getFeaturedPosts","featuredPosts","filter","post","isFeatured","postIdentifier","postSlug","replace","filePath","fileContent","readFileSync","data","content","postData","slug"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,cAAc,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAGA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAChC,SAAOP,EAAE,CAACQ,WAAH,CAAeL,cAAf,CAAP;AACD,CAFM;AAKP,OAAO,MAAMM,WAAW,GAAG,MAAM;AAC/B,QAAMC,SAAS,GAAGH,YAAY,EAA9B;AAEA,QAAMI,QAAQ,GAAGD,SAAS,CAACE,GAAV,CAAcC,QAAQ,IAAI;AACzC,WAAOC,WAAW,CAACD,QAAD,CAAlB;AACD,GAFgB,CAAjB;AAIA,QAAME,WAAW,GAAGJ,QAAQ,CAACK,IAAT,CAAc,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAClDD,IAAAA,KAAK,CAACE,IAAN,GAAaD,KAAK,CAACC,IAAnB,GAA0B,CAAC,CAA3B,GAA+B,CAA/B;AACD,GAFmB,CAApB;AAIA,SAAOJ,WAAP;AACD,CAZM;AAeP,OAAO,MAAMK,gBAAgB,GAAG,MAAM;AACpC,QAAMT,QAAQ,GAAGF,WAAW,EAA5B;AAEA,QAAMY,aAAa,GAAGV,QAAQ,CAACW,MAAT,CAAgBC,IAAI,IAAIA,IAAI,CAACC,UAA7B,CAAtB;AAEA,SAAOH,aAAP;AACD,CANM;AASP,OAAO,MAAMP,WAAW,GAAIW,cAAD,IAAoB;AAC7C,QAAMC,QAAQ,GAAGD,cAAc,CAACE,OAAf,CAAuB,OAAvB,EAAgC,EAAhC,CAAjB;AACA,QAAMC,QAAQ,GAAG3B,IAAI,CAACG,IAAL,CAAUD,cAAV,EAA2B,GAAEuB,QAAS,KAAtC,CAAjB;AACA,QAAMG,WAAW,GAAG7B,EAAE,CAAC8B,YAAH,CAAgBF,QAAhB,EAA0B,OAA1B,CAApB;AAEA,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoB9B,MAAM,CAAC2B,WAAD,CAAhC;;AAGA,QAAMI,QAAQ;AACZC,IAAAA,IAAI,EAAER;AADM,KAETK,IAFS;AAGZC,IAAAA;AAHY,IAAd;;AAMA,SAAOC,QAAP;AACD,CAfM","sourcesContent":["import fs from 'fs'\nimport path from 'path'\n\nimport matter from 'gray-matter'\n\nconst postsDirectory = path.join(process.cwd(), 'posts')\n\n\nexport const getPostFiles = () => {\n  return fs.readdirSync(postsDirectory)\n}\n\n\nexport const getAllPosts = () => {\n  const postFiles = getPostFiles()\n\n  const allPosts = postFiles.map(postFile => {\n    return getPostData(postFile)\n  })\n\n  const sortedPosts = allPosts.sort((postA, postB) => {\n    postA.date > postB.date ? -1 : 1\n  })\n\n  return sortedPosts\n}\n\n\nexport const getFeaturedPosts = () => {\n  const allPosts = getAllPosts()\n\n  const featuredPosts = allPosts.filter(post => post.isFeatured)\n\n  return featuredPosts\n}\n\n\nexport const getPostData = (postIdentifier) => {\n  const postSlug = postIdentifier.replace(/\\.md$/, '')\n  const filePath = path.join(postsDirectory, `${postSlug}.md`)\n  const fileContent = fs.readFileSync(filePath, 'utf-8')\n\n  const { data, content } = matter(fileContent)\n\n\n  const postData = {\n    slug: postSlug,\n    ...data,\n    content,\n  }\n\n  return postData\n}"]},"metadata":{},"sourceType":"module"}